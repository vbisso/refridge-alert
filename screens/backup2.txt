import React, { useState, useEffect } from "react";
import { ScrollView, View, Text, Button } from "react-native";
import { Picker } from "@react-native-picker/picker";

import FoodForm from "../components/FoodForm";
import FoodList from "../components/FoodList";

import AsyncStorage from "@react-native-async-storage/async-storage";

const HomeScreen = () => {
  const [foods, setFoods] = useState([]);
  //console.log(foods);

  const [sortBy, setSortBy] = useState("expDate"); // Default sorting by expiration date

  useEffect(() => {
    loadFoods();
    //console.log("HomeScreen is loading???");
  }, []);

  useEffect(() => {
    setFoods((prevFoods) => sortFoods(prevFoods, sortBy));
  }, [sortBy]);

  const sortFoods = (foods, criterion) => {
    return [...foods].sort((a, b) => {
      if (criterion === "expDate") {
        return new Date(a.expDate) - new Date(b.expDate);
      } else if (criterion === "category") {
        return a.category.localeCompare(b.category);
      } else if (criterion === "name") {
        return a.name.localeCompare(b.name);
      }
      return 0;
    });
  };

  //loads foods from async storage
  const loadFoods = async () => {
    const storedFoods = await AsyncStorage.getItem("foods");

    if (storedFoods) {
      const foodsWithDates = JSON.parse(storedFoods).map((food) => ({
        ...food,
        expDate: new Date(food.expDate), // Convert string to Date object
      }));
      //console.log("Foods loaded:", foodsWithDates);

      setFoods(sortFoods(foodsWithDates, sortBy)); // Sort the foods by the criteria. Expiration data by defualt.
    } else {
      console.log("No foods stored.");
    }
  };

  //saving foods to local storage
  const saveFoods = async (food) => {
    //console.log(food);
    const newFoods = [...foods, food]; //adds the new food to the existing array of foods
    setFoods(newFoods); //sets the state of the component to the new array of foods
    await AsyncStorage.setItem("foods", JSON.stringify(newFoods)); //saves the new array of foods to the local storage
    //console.log(JSON.stringify(newFoods));
  };

  const onDelete = async (index) => {
    const newFoods = foods.filter((_, i) => i !== index);
    setFoods(newFoods);
    await AsyncStorage.setItem("foods", JSON.stringify(newFoods));
  };

  return (
    <View>
      <ScrollView>
        <Text></Text>
        <FoodForm onSave={saveFoods} />
        <FoodList foods={foods} onDelete={onDelete} />
      </ScrollView>
    
      
      <Text>Sorting Buttons</Text>
      <Button title="Sort by Expiration Date" onPress={() => setSortBy("expDate")} />
      <Button title="Sort by Category" onPress={() => setSortBy("category")} />
      <Button title="Sort by Name" onPress={() => setSortBy("name")} />
      
  </View>

    
  );
};

export default HomeScreen;
