import React, { useState, useEffect } from "react";
import { ScrollView, View, Text } from "react-native"; 
import { Picker } from "@react-native-picker/picker"; // Import Picker
import FoodForm from "../components/FoodForm";
import FoodList from "../components/FoodList";
import AsyncStorage from "@react-native-async-storage/async-storage";

const HomeScreen = () => {
  const [foods, setFoods] = useState([]);
  const [sortBy, setSortBy] = useState("expDate"); // Default sorting

  useEffect(() => {
    loadFoods();
  }, []);

  useEffect(() => {
    setFoods((prevFoods) => sortFoods(prevFoods, sortBy));
  }, [sortBy]);

  const sortFoods = (foods, criterion) => {
    return [...foods].sort((a, b) => {
      if (criterion === "expDate") {
        return new Date(a.expDate) - new Date(b.expDate);
      } else if (criterion === "category") {
        return a.category.localeCompare(b.category);
      } else if (criterion === "name") {
        return a.name.localeCompare(b.name);
      }
      return 0;
    });
  };

  const loadFoods = async () => {
    const storedFoods = await AsyncStorage.getItem("foods");
    if (storedFoods) {
      const foodsWithDates = JSON.parse(storedFoods).map((food) => ({
        ...food,
        expDate: new Date(food.expDate),
      }));
      setFoods(sortFoods(foodsWithDates, "expDate"));
    } else {
      console.log("No foods stored.");
    }
  };

  const saveFoods = async (food) => {
    const newFoods = sortFoods([...foods, { ...food, expDate: new Date(food.expDate) }], sortBy);
    setFoods(newFoods);
    await AsyncStorage.setItem("foods", JSON.stringify(newFoods));
  };

  const onDelete = async (index) => {
    const newFoods = foods.filter((_, i) => i !== index);
    setFoods(newFoods);
    await AsyncStorage.setItem("foods", JSON.stringify(newFoods));
  };

  return (
    <View>
      <ScrollView>
        <Text></Text>
        
        <FoodList foods={foods} onDelete={onDelete} />
      </ScrollView>

      <Text>Sort Foods By:</Text>
      <Picker
        selectedValue={sortBy}
        onValueChange={(itemValue) => setSortBy(itemValue)}
        style={{ height: 25, width: 200 }}
      >
        <Picker.Item label="Expiration Date" value="expDate" />
        <Picker.Item label="Category" value="category" />
        <Picker.Item label="Name" value="name" />
      </Picker>
    </View>
  );
};

export default HomeScreen;
